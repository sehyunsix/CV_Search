export function geminiRegionTextPrompt(content : string) {
  return `
당신은 행정동코드를 정확히 지역에 따라 전환해야합니다.
다음과같은 주의사항을 지켜주세요

1.지역정보가 명확할경우 행정코드로 변환해주세요
regionText : 서울시 강남구 => [1168000000]

2.같이 지역이 여러개로 들어오면 여러개의 행정동코드를 넣어서 리스트로 반환해주세요.
regionText :  경기 안산시, 안산시 상록구 => [4127000000 ,4127100000]

3.발음이 비슷한 지역은 비슷한 지역의 한국어지역으로 맵핑해서 행정동코드를 반환해주세요
예)seoul -> 서울 ,bundang -> 경기도 성남시 분당 ,Seocho-> 서울시 서초구

4.만약 불확실한 경우나, 서울시, 경기 등 시도만 나와있다면 두 자리까지만 코드를 출력해주세요
에 서울 -> [1100000000] , 경기->[4100000000]

5.다른 나라의 지역은 빈배열로 반환해주세요
예 베이징 -> [] , 파리 -> []

6.코너 케이스를 주의해주세요, 다른 시설과 지역이 붙어있다면 그 지역의 이름만 분석해서
행정동 코드를반환해주세요
예 신세계백화점 서울점 -> 서울, 매장천안점 ->천안, 천안 공장 -> 천안

${content}
`;
}
export function geminiRecruitInfoPrompt(content : string) {
  return `
당신은 전문적인 IT 채용 정보 분석가입니다. 다음 텍스트가 채용 공고인지 분석하세요.
채용공고인 동시에 IT직군 이여야합니다.

지시사항:
1. 텍스트가  IT 채용 공고인지 여부를 판단하세요.(회사 소개 글은 채용공고가 아님을 유의해서 판단하세요)
2. IT 채용 공고가 맞다면:
 - "is_recruit_info" 필드를 true로 설정하세요. 아니면 flase로 설정하고 , 나머지 필드는 null로 설정하세요.
 - 다음 정보를 추출하여 해당 필드에 입력하세요. 정보가 없다면 null이나 빈 문자열로 설정하세요.
 - title: 적절한 채용 공고 제목을 작성하세요. (예: "토스 프론트엔드 개발자 채용") 회사명과 직무를 포함하세요.
 - company_name: 채용하는 회사명
 - department: 채용하는 부서 또는 팀
 - region_text: 근무 지역 또는 회사 위치 시도구 기준으로 한국어로 작성하세요. 여러 지역이 있다면 쉼표로 구분하세요. 예) 서울시 강남구, 경기도 성남시 분당구
 - region_id: region_text의 값을 대한민국 법정동 코드로 변환하세요 경기 안산시, 안산시 상록구 => [4127000000 ,4127100000]
 - require_experience: 요구되는 경력 수준 ("경력무관", "신입", "경력"). 가능하면 이 세 가지 카테고리로 매핑해주세요.
 - job_description: 주요 업무 내용이나 직무기술서에 대한 내용을 기술하세요.
 - job_type: 고용 형태. 표준 용어를 사용하세요 (정규직, 계약직, 인턴, 아르바이트, 프리랜서, 파견직) 중 하나를 선택하세요.
   나와있지 않은 고용형태는 "무관"으로 설정하세요.
 - apply_start_date: 지원 시작일 또는 게시일 (가능한 YYYY-MM-DD 형식으로 맞추어주세요)
 - apply_end_date: 지원 마감일 (가능한 YYYY-MM-DD 형식으로 맞추어주세요)
 - requirements: 필수 자격 요건
 - preferred_qualifications: 우대 사항
 - ideal_candidate: 회사가 찾는 인재상
3. 채용 공고가 아니라면:
- "is_recruit_info" 필드를 false로 설정하세요.
- 나머지 필드는 null로 설정하세요.
4. 결과는 한국어로 작성하세요.

다음 텍스트를 분석하세요:
---
${content}
---

지정된 스키마 속성에 따라 JSON 형식으로 결과를 출력하세요.
`;
}

export function geminiRecruitInfoValidationPrompt(content: string): string {
return  `프롬프트 제목: 채용 공고 필터링: 국내 IT 기업 식별

역할: 당신은 채용 공고 분석 전문가입니다. 주어진 채용 공고 텍스트를 분석하여, 다음 두 가지 핵심 조건에 따라 필터링하고 결과를 제시해야 합니다.

입력 (Input):
채용 공고 웹사이트에서 추출된 원본 텍스트 (string)

출력 (Output):
결과는 다음 형식으로 엄격하게 제한되며, result와 reason 필드는 반드시 값을 가져야 합니다 (NOT NULL).
result : reason

필터링 조건:

국내 기업 여부: 회사는 외국계 기업이 아니어야 합니다. (즉, 대한민국에 법인 또는 본사를 둔 국내 기업이어야 합니다.)
IT 산업군 여부: 회사는 IT 관련 산업군의 회사여야 합니다. (예: 소프트웨어 개발, 정보통신, 데이터 분석/처리, AI, 클라우드 서비스, 플랫폼 운영, 시스템 통합(SI), 게임 개발, IT 컨설팅 등)
처리 규칙 및 출력 예시:

조건 1과 조건 2를 모두 충족하는 경우:

result: 적합
reason: 국내 IT 기업으로 판단됩니다.
조건 1을 충족하지 못하는 경우 (외국계 기업으로 판단될 시):

result: 부적합
reason: 외국계 기업으로 판단됩니다. (IT 기업 여부와 관계없이 우선적으로 이 사유를 적용합니다.)
조건 1은 충족하지만 조건 2를 충족하지 못하는 경우 (국내 기업이지만 IT 기업이 아닐 시):

result: 부적합
reason: IT 관련 산업군 기업이 아닌 것으로 판단됩니다.
두 조건 모두 충족하지 못하는 경우 (외국계 기업이면서 IT 기업도 아닐 시):

result: 부적합
reason: 외국계 기업이며 IT 관련 산업군 기업이 아닌 것으로 판단됩니다. (또는 "외국계 기업으로 판단됩니다."로 외국계 기업임을 우선 명시해도 됩니다.)
지시사항:
주어진 텍스트 내에서 회사명, 회사 소개, 사업 분야, 본사 위치, 기업 국적 관련 언급(예: "글로벌", "외국계", "OO지사" 등) 등을 종합적으로 분석하여 위 조건에 따라 판단하십시오. 판단 근거가 명확하지 않을 경우, 텍스트에서 가장 유력하게 추론할 수 있는 내용을 바탕으로 결정하고, reason에 간략하게라도 그 뉘앙스를 포함할 수 있습니다.
반드시 result와 reason 필드를 포함한 JSON 형식으로 결과를 출력해야 합니다. 예시 출력 형식은 다음과 같습니다:
{
"result": "적합",
"reason": "국내 IT 기업으로 판단됩니다."
}
입력 :${content}

`;
}

/**
 * 채용 공고 원문 텍스트에서 마감일을 추출하기 위한 Gemini 프롬프트를 생성합니다.
 *
 * @param content 채용 공고의 원문 텍스트 (raw_text)
 * @returns Gemini에게 전달할 완성된 프롬프트 문자열
 */
export function geminiJobEndDatePrompt(content: string): string {
  return `
### 역할
당신은 채용 공고 텍스트에서 '마감일' 정보만을 정확하게 추출하고, 지정된 JSON 형식으로 반환하는 전문 분석가입니다.

### 지시사항
주어진 채용 공고 내용에서 마감일을 찾아 "YYYY-MM-DD" 형식의 날짜 문자열로 변환해 주세요. 아래 규칙을 반드시 준수해야 합니다.

1.  **'상시채용' 및 유사 케이스**: '상시채용', '수시채용', '채용시 마감', '인재풀 등록', '마감기한 없음' 등 구체적인 날짜가 명시되어 있지 않다면, "job_end_date" 값을 반드시 \"null\"로 설정해야 합니다.
2.  **날짜 형식 정규화**: 날짜는 '2024년 8월 15일', '24.08.15', '2024/08/15', '~8/15' 등 다양한 형식으로 표현될 수 있습니다. 어떤 형식이든 "YYYY-MM-DD"로 정규화해야 합니다. 연도가 명시되지 않은 경우, 현재 연도로 가정합니다.
3.  **기간 명시**: '접수 기간: 2024.08.01 ~ 2024.08.15'와 같이 기간이 명시된 경우, 반드시 '종료일'을 추출해야 합니다.
4.  **월만 명시**: '8월까지'와 같이 월만 명시된 경우, 해당 월의 마지막 날짜를 마감일로 간주합니다. (예: '8월까지' -> "YYYY-08-31")
5.  **상대적 날짜**: 'D-7', '마감 7일 전'과 같이 상대적인 날짜 표기는 정확한 날짜를 특정할 수 없으므로 \"null\"로 처리합니다.
6.  **정보 없음**: 공고 내용에서 마감일에 대한 어떠한 정보도 찾을 수 없다면, \"null\"을 반환합니다.
7.  **시간 정보 무시**: '오후 6시', '24:00' 등 시간 정보는 무시하고 날짜만 추출합니다.

### 예시

**입력 1:** "접수기간: 2024년 12월 16일(월) ~ 2024년 12월 31일(화) 18:00"
**출력 1:**
\`\`\`json
{
  "job_end_date": "2024-12-31"
}
\`\`\`

**입력 2:** "본 채용은 상시채용으로 진행됩니다."
**출력 2:**
\`\`\`json
{
  "job_end_date": null
}
\`\`\`

**입력 3:** "서류 접수 마감: ~ 9. 15.(일) 까지"
**출력 3:**
\`\`\`json
{
  "job_end_date": "2024-09-15"
}
\`\`\`

**입력 4:** "채용이 완료될 때까지 지원서를 받습니다."
**출력 4:**
\`\`\`json
{
  "job_end_date": null
}
\`\`\`

**입력 5:** "자격요건: ... 우대사항: ... 근무조건: ..." (마감일 정보 없음)
**출력 5:**
\`\`\`json
{
  "job_end_date": null
}
\`\`\`

### 입력 텍스트
${content}
`;
}